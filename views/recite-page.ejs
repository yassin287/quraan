<nav class="navbar navbar-expand-lg navbar-light">
	<div class="container-xxl">
		<a class="navbar-brand d-flex" href="/">
			<i class="fas fa-mosque" style="margin-left: 10px; font-size: 1.8rem;"></i>
			 القرآن الكريم
		</a>
		<button
			class="navbar-toggler"
			type="button"
			data-bs-toggle="collapse"
			data-bs-target="#navbarNav"
			aria-controls="navbarNav"
			aria-expanded="false"
			aria-label="Toggle navigation"
		>
			<span class="navbar-toggler-icon"></span>
		</button>
		<div class="collapse navbar-collapse" id="navbarNav">
			<ul class="navbar-nav">
				<li class="nav-item me-3">
					<a class="nav-link" href="/">الرئيسية</a>
				</li>
				<li class="nav-item me-3">
					<a class="nav-link" href="/surahs">السور</a>
				</li>
				<li class="nav-item me-3">
					<a class="nav-link" href="/search">البحث</a>
				</li>
				<li class="nav-item me-3">
					<a class="nav-link active" aria-current="page" href="/recite">التلاوة التفاعلية</a>
				</li>
				<li class="nav-item me-3">
					<a class="nav-link" href="/prayer-times">أوقات الصلاة</a>
				</li>
			</ul>
		</div>
	</div>
</nav>

<div class="container-fluid vh-100 d-flex flex-column">
	<!-- Header -->
	<div class="row py-3" style="background: linear-gradient(135deg, #2d2d2d 0%, #1a1a1a 100%); border-bottom: 2px solid #b8860b;">
		<div class="col-12 text-center">
			<h2 class="mb-0" style="font-family: 'Quranic'; color: #b8860b;">
				<%= surah.name %> 
				<small style="color: rgba(255, 255, 255, 0.7);">(<%= surah.englishName %>)</small>
			</h2>
			<p class="mb-0" style="color: rgba(255, 255, 255, 0.8);">
				آية <span id="current-ayah-number">1</span> من <%= surah.numberOfAyahs %>
			</p>
		</div>
	</div>

	<!-- Main Content -->
	<div class="row flex-grow-1">
		<!-- Recitation Area -->
		<div class="col-12 d-flex flex-column justify-content-center align-items-center text-center p-4">
			<!-- Progress Bar -->
			<div class="w-100 mb-4" style="max-width: 600px;">
				<div class="progress mb-2" style="height: 8px; background-color: #1a1a1a; border: 1px solid #b8860b; border-radius: 10px;">
					<div class="progress-bar" role="progressbar" 
						 style="width: 0%; background: linear-gradient(90deg, #b8860b 0%, #d4af37 100%); border-radius: 8px;" 
						 aria-valuenow="0" 
						 aria-valuemin="0" 
						 aria-valuemax="100"
						 id="progress-bar">
					</div>
				</div>
				<small style="color: #b8860b; font-family: 'Quranic';">التقدم في السورة</small>
			</div>

			<!-- Current Ayah Display -->
			<div class="ayah-container mb-4" style="min-height: 200px; max-width: 800px;">
				<div id="ayah-text" style="font-family: 'Quranic'; font-size: 2.5rem; line-height: 1.8; direction: rtl; color: #ffffff; margin-bottom: 20px;">
					<!-- Words will be populated here -->
				</div>
				<div class="ayah-number">
					<span style="background-color: #b8860b; color: #000000; padding: 8px 12px; border-radius: 50%; font-size: 1.1rem; font-weight: bold;" id="ayah-badge">1</span>
				</div>
			</div>

			<!-- Controls -->
			<div class="controls-container mb-4">
				<button id="start-btn" class="btn-custom btn-success me-3">
					<i class="fas fa-microphone"></i>
					ابدأ التلاوة
				</button>
				<button id="stop-btn" class="btn-custom btn-danger me-3" disabled>
					<i class="fas fa-stop"></i>
					إيقاف
				</button>
				<button id="skip-btn" class="btn-custom btn-secondary me-2">
					<i class="fas fa-forward"></i>
					تخطي الآية
				</button>
				<button id="multi-verse-btn" class="btn-custom btn-multi me-2">
					<i class="fas fa-layer-group"></i>
					<span id="multi-verse-text">تلاوة متعددة</span>
				</button>
				<button id="complete-btn" class="btn-custom btn-smart" style="display: none;">
					<i class="fas fa-check-circle"></i>
					إكمال ذكي
				</button>
			</div>

			<!-- Status Messages -->
			<div id="status-message" class="status-alert" style="display: none;"></div>

			<!-- Microphone Status -->
			<div id="mic-status" class="text-center" style="display: none;">
				<div class="microphone-animation">
					<i class="fas fa-microphone fa-3x pulse" style="color: #b8860b;"></i>
				</div>
				<p class="mt-2" style="color: rgba(255, 255, 255, 0.8); font-family: 'Quranic';">جاري الاستماع...</p>
			</div>
		</div>
	</div>

	<!-- Back Button -->
	<div class="row">
		<div class="col-12 text-center pb-3">
			<a href="/recite" class="btn-custom btn-back">
				<i class="fas fa-arrow-right me-2"></i>
				العودة لاختيار السورة
			</a>
		</div>
	</div>
</div>

<!-- Hidden data for JavaScript -->
<script type="application/json" id="surah-data">
<%- JSON.stringify(ayahs) %>
</script>

<script>
class QuranReciter {
	constructor() {
		this.ayahs = JSON.parse(document.getElementById('surah-data').textContent);
		this.currentAyahIndex = 0;
		this.currentWordIndex = 0;
		this.recognition = null;
		this.isListening = false;
		this.isMultiVerseMode = false;
		this.multiVerseBuffer = [];
		
		this.initElements();
		this.initSpeechRecognition();
		this.loadCurrentAyah();
		this.bindEvents();
	}

	initElements() {
		this.startBtn = document.getElementById('start-btn');
		this.stopBtn = document.getElementById('stop-btn');
		this.skipBtn = document.getElementById('skip-btn');
		this.completeBtn = document.getElementById('complete-btn');
		this.multiVerseBtn = document.getElementById('multi-verse-btn');
		this.multiVerseText = document.getElementById('multi-verse-text');
		this.ayahText = document.getElementById('ayah-text');
		this.statusMessage = document.getElementById('status-message');
		this.micStatus = document.getElementById('mic-status');
		this.progressBar = document.getElementById('progress-bar');
		this.currentAyahNumber = document.getElementById('current-ayah-number');
		this.ayahBadge = document.getElementById('ayah-badge');
	}

	initSpeechRecognition() {
		if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
			this.showStatus('المعذرة، المتصفح لا يدعم التعرف على الصوت. يرجى استخدام متصفح Chrome أو Edge.', 'warning');
			this.startBtn.disabled = true;
			return;
		}

		const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
		this.recognition = new SpeechRecognition();
		
		this.recognition.lang = 'ar-SA';
		this.recognition.continuous = true; // Changed back to true for full ayah recognition
		this.recognition.interimResults = false; // Keep false for accurate results
		this.recognition.maxAlternatives = 3;

		this.recognition.onstart = () => {
			this.isListening = true;
			this.micStatus.style.display = 'block';
			this.showStatus('ابدأ بتلاوة الآية كاملة...', 'info');
		};

		this.recognition.onresult = (event) => {
			let finalTranscript = '';
			
			for (let i = event.resultIndex; i < event.results.length; i++) {
				if (event.results[i].isFinal) {
					finalTranscript += event.results[i][0].transcript;
				}
			}

			if (finalTranscript) {
				console.log('Full speech recognition result:', finalTranscript);
				this.processFullRecitation(finalTranscript.trim());
			}
		};

		this.recognition.onerror = (event) => {
			console.error('Speech recognition error:', event.error);
			if (event.error === 'no-speech') {
				this.showStatus('لم يتم سماع صوت. حاول مرة أخرى.', 'warning');
			} else {
				this.showStatus('حدث خطأ في التعرف على الصوت. حاول مرة أخرى.', 'danger');
			}
			
			// Restart recognition
			if (this.isListening) {
				setTimeout(() => {
					if (this.isListening) {
						this.recognition.start();
					}
				}, 1000);
			}
		};

		this.recognition.onend = () => {
			// Restart recognition if we're still listening
			if (this.isListening) {
				setTimeout(() => {
					if (this.isListening) {
						this.recognition.start();
					}
				}, 100);
			}
		};
	}

	bindEvents() {
		this.startBtn.addEventListener('click', () => this.startListening());
		this.stopBtn.addEventListener('click', () => this.stopListening());
		this.skipBtn.addEventListener('click', () => this.skipAyah());
		this.completeBtn.addEventListener('click', () => this.smartComplete());
		this.multiVerseBtn.addEventListener('click', () => this.toggleMultiVerseMode());
	}

	loadCurrentAyah() {
		if (this.currentAyahIndex >= this.ayahs.length) {
			this.completeSurah();
			return;
		}

		if (this.isMultiVerseMode) {
			this.loadMultipleAyahs();
		} else {
			this.loadSingleAyah();
		}
		
		this.updateProgress();
		this.completeBtn.style.display = 'none';
	}

	loadSingleAyah() {
		const currentAyah = this.ayahs[this.currentAyahIndex];
		this.currentWordIndex = 0;
		
		// Split ayah into words and create spans for each word - HIDDEN BY DEFAULT
		const words = currentAyah.text.split(' ');
		this.ayahText.innerHTML = words.map((word, index) => 
			`<span class="word" data-index="${index}" data-ayah="${this.currentAyahIndex}" data-original="${word}" style="opacity: 0; visibility: hidden; transform: scale(0.8);">${word}</span>`
		).join(' ');

		// Update UI
		this.currentAyahNumber.textContent = currentAyah.numberInSurah;
		this.ayahBadge.textContent = currentAyah.numberInSurah;
		
		// Show instruction for full ayah recitation
		this.showStatus(`الآية ${currentAyah.numberInSurah} - اقرأ الآية كاملة وستظهر الكلمات الصحيحة تدريجياً`, 'info');
	}

	loadMultipleAyahs() {
		// Load the next 3-5 ayahs for multi-verse mode
		const versesToLoad = Math.min(5, this.ayahs.length - this.currentAyahIndex);
		let combinedHTML = '';
		let totalWords = 0;
		
		for (let i = 0; i < versesToLoad; i++) {
			const ayahIndex = this.currentAyahIndex + i;
			if (ayahIndex >= this.ayahs.length) break;
			
			const ayah = this.ayahs[ayahIndex];
			const words = ayah.text.split(' ');
			
			if (i > 0) combinedHTML += '<br><br>'; // Add line break between verses
			
			combinedHTML += `<span class="ayah-number-inline" style="color: #b8860b; font-size: 0.8em; margin-left: 10px;">(${ayah.numberInSurah})</span> `;
			combinedHTML += words.map((word, wordIndex) => 
				`<span class="word" data-index="${totalWords + wordIndex}" data-ayah="${ayahIndex}" data-original="${word}" style="opacity: 0; visibility: hidden; transform: scale(0.8);">${word}</span>`
			).join(' ');
			
			totalWords += words.length;
		}
		
		this.ayahText.innerHTML = combinedHTML;
		this.currentWordIndex = 0;
		
		// Update UI for range display
		const endAyah = Math.min(this.currentAyahIndex + versesToLoad - 1, this.ayahs.length - 1);
		this.currentAyahNumber.textContent = `${this.ayahs[this.currentAyahIndex].numberInSurah}-${this.ayahs[endAyah].numberInSurah}`;
		this.ayahBadge.textContent = `${this.ayahs[this.currentAyahIndex].numberInSurah}-${this.ayahs[endAyah].numberInSurah}`;
		
		// Show instruction for multi-verse recitation
		this.showStatus(`الآيات ${this.ayahs[this.currentAyahIndex].numberInSurah}-${this.ayahs[endAyah].numberInSurah} - اقرأ عدة آيات متتالية وستظهر الكلمات تدريجياً`, 'info');
	}

	startListening() {
		if (!this.recognition) return;

		try {
			this.recognition.start();
			this.startBtn.disabled = true;
			this.stopBtn.disabled = false;
		} catch (error) {
			console.error('Error starting recognition:', error);
			this.showStatus('خطأ في بدء التعرف على الصوت', 'danger');
		}
	}

	stopListening() {
		this.isListening = false;
		if (this.recognition) {
			this.recognition.stop();
		}
		this.startBtn.disabled = false;
		this.stopBtn.disabled = true;
		this.micStatus.style.display = 'none';
		this.showStatus('تم إيقاف الاستماع', 'secondary');
	}

	toggleMultiVerseMode() {
		this.isMultiVerseMode = !this.isMultiVerseMode;
		
		if (this.isMultiVerseMode) {
			this.multiVerseBtn.classList.add('active');
			this.multiVerseText.textContent = 'وضع واحد';
			this.showStatus('تم تفعيل وضع التلاوة المتعددة - يمكنك تلاوة عدة آيات متتالية', 'success');
		} else {
			this.multiVerseBtn.classList.remove('active');
			this.multiVerseText.textContent = 'تلاوة متعددة';
			this.showStatus('تم تفعيل وضع الآية الواحدة', 'info');
		}
		
		// Reload current display
		this.loadCurrentAyah();
	}

	processFullRecitation(transcript) {
		if (this.isMultiVerseMode) {
			this.processMultiVerseRecitation(transcript);
		} else {
			this.processSingleVerseRecitation(transcript);
		}
	}

	processSingleVerseRecitation(transcript) {
		const currentAyah = this.ayahs[this.currentAyahIndex];
		const expectedWords = currentAyah.text.split(' ');
		const spokenWords = transcript.split(' ');
		
		console.log('Expected ayah:', currentAyah.text);
		console.log('Spoken text:', transcript);
		
		let correctWordsCount = 0;
		let firstIncorrectWord = null;
		let totalMatchScore = 0;
		
		// Check each word in sequence
		for (let i = this.currentWordIndex; i < expectedWords.length; i++) {
			const expectedWord = this.normalizeArabic(expectedWords[i]);
			let wordFound = false;
			let bestMatchScore = 0;
			
			// Check if this expected word appears in the spoken text
			for (let j = 0; j < spokenWords.length; j++) {
				const spokenWord = this.normalizeArabic(spokenWords[j]);
				
				if (this.wordsMatch(spokenWord, expectedWord)) {
					wordFound = true;
					bestMatchScore = this.calculateSimilarity(spokenWord, expectedWord);
					break;
				} else {
					// Track best similarity even if not matching
					const similarity = this.calculateSimilarity(spokenWord, expectedWord);
					bestMatchScore = Math.max(bestMatchScore, similarity);
				}
			}
			
			if (wordFound || bestMatchScore > 0.65) { // Accept if 65% similar
				// Reveal this word
				this.revealWord(i);
				correctWordsCount++;
				totalMatchScore += bestMatchScore;
				this.currentWordIndex = i + 1;
			} else {
				// This word is incorrect or missing, but check if we should be lenient
				if (bestMatchScore > 0.4) { // 40% similarity - show as partial match
					this.revealWord(i);
					correctWordsCount++;
					totalMatchScore += bestMatchScore;
					this.currentWordIndex = i + 1;
					this.showStatus(`كلمة قريبة مقبولة: "${expectedWords[i]}" (${Math.round(bestMatchScore * 100)}%)`, 'warning');
				} else {
					firstIncorrectWord = expectedWords[i];
					break;
				}
			}
		}
		
		// Calculate overall match percentage
		const averageMatch = correctWordsCount > 0 ? (totalMatchScore / correctWordsCount) * 100 : 0;
		
		// Provide feedback
		if (correctWordsCount > 0) {
			if (firstIncorrectWord) {
				this.showStatus(`ممتاز! ${correctWordsCount} كلمة صحيحة (${Math.round(averageMatch)}%). الكلمة التالية: "${firstIncorrectWord}"`, 'warning');
				// Show smart complete button if we have good progress (more than 50% of the ayah)
				if (correctWordsCount / expectedWords.length > 0.5) {
					this.completeBtn.style.display = 'inline-block';
				}
			} else if (this.currentWordIndex >= expectedWords.length) {
				// Complete ayah - accept even if not perfect
				this.completeBtn.style.display = 'none';
				if (averageMatch >= 65) {
					setTimeout(() => this.completeAyah(), 1000);
				} else {
					this.showStatus(`تم إكمال الآية بنسبة ${Math.round(averageMatch)}%. أعد المحاولة للحصول على دقة أعلى.`, 'success');
					setTimeout(() => this.completeAyah(), 2000);
				}
			} else {
				this.showStatus(`رائع! ${correctWordsCount} كلمة صحيحة (${Math.round(averageMatch)}%). تابع التلاوة...`, 'success');
				this.completeBtn.style.display = 'none';
			}
		} else {
			const nextExpectedWord = expectedWords[this.currentWordIndex];
			this.showStatus(`ابدأ بالكلمة: "${nextExpectedWord}"`, 'info');
			this.completeBtn.style.display = 'none';
		}
	}

	processMultiVerseRecitation(transcript) {
		// Get all words from all visible verses
		const allWordElements = document.querySelectorAll('.word');
		const totalWords = allWordElements.length;
		const spokenWords = transcript.split(' ');
		
		console.log('Multi-verse recitation - Total words:', totalWords);
		console.log('Spoken text:', transcript);
		
		let correctWordsCount = 0;
		let totalMatchScore = 0;
		let versesCompleted = 0;
		
		// Check each word in sequence across all verses
		for (let i = this.currentWordIndex; i < totalWords; i++) {
			const wordElement = allWordElements[i];
			const expectedWord = this.normalizeArabic(wordElement.getAttribute('data-original'));
			const ayahIndex = parseInt(wordElement.getAttribute('data-ayah'));
			
			let wordFound = false;
			let bestMatchScore = 0;
			
			// Check if this expected word appears in the spoken text
			for (let j = 0; j < spokenWords.length; j++) {
				const spokenWord = this.normalizeArabic(spokenWords[j]);
				
				if (this.wordsMatch(spokenWord, expectedWord)) {
					wordFound = true;
					bestMatchScore = this.calculateSimilarity(spokenWord, expectedWord);
					break;
				} else {
					const similarity = this.calculateSimilarity(spokenWord, expectedWord);
					bestMatchScore = Math.max(bestMatchScore, similarity);
				}
			}
			
			if (wordFound || bestMatchScore > 0.65) {
				// Reveal this word
				this.revealWordByElement(wordElement);
				correctWordsCount++;
				totalMatchScore += bestMatchScore;
				this.currentWordIndex = i + 1;
				
				// Check if we completed a verse
				if (i === totalWords - 1 || parseInt(allWordElements[i + 1]?.getAttribute('data-ayah')) !== ayahIndex) {
					versesCompleted++;
				}
			} else if (bestMatchScore > 0.4) {
				// Partial match
				this.revealWordByElement(wordElement);
				correctWordsCount++;
				totalMatchScore += bestMatchScore;
				this.currentWordIndex = i + 1;
			} else {
				// Stop at first incorrect word
				break;
			}
		}
		
		// Calculate match percentage
		const averageMatch = correctWordsCount > 0 ? (totalMatchScore / correctWordsCount) * 100 : 0;
		
		// Provide feedback
		if (correctWordsCount > 0) {
			if (versesCompleted > 0) {
				this.showStatus(`ممتاز! تم إكمال ${versesCompleted} آية كاملة و ${correctWordsCount} كلمة (${Math.round(averageMatch)}%)`, 'success');
				// Auto-advance to next set of verses after completing some
				setTimeout(() => {
					this.currentAyahIndex += versesCompleted;
					this.loadCurrentAyah();
				}, 2000);
			} else {
				this.showStatus(`رائع! ${correctWordsCount} كلمة صحيحة (${Math.round(averageMatch)}%). تابع التلاوة...`, 'success');
				
				// Show smart complete if good progress
				if (correctWordsCount / totalWords > 0.3) {
					this.completeBtn.style.display = 'inline-block';
				}
			}
		} else {
			const nextWord = allWordElements[this.currentWordIndex]?.getAttribute('data-original');
			this.showStatus(`ابدأ بالكلمة: "${nextWord}"`, 'info');
		}
	}

	wordsMatch(spoken, expected) {
		// Direct match
		if (spoken === expected) return true;
		
		// Check if spoken contains expected or vice versa
		if (spoken.includes(expected) || expected.includes(spoken)) return true;
		
		// Check for partial matches (if at least 3 characters match)
		if (spoken.length >= 3 && expected.length >= 3) {
			const minLength = Math.min(spoken.length, expected.length);
			const maxLength = Math.max(spoken.length, expected.length);
			
			// More lenient for shorter words
			if (minLength <= 4) {
				return this.fuzzyMatch(spoken, expected);
			}
			
			// Check if first few characters match (common in Arabic roots)
			const firstCharsMatch = spoken.substring(0, 3) === expected.substring(0, 3);
			if (firstCharsMatch) return true;
			
			// Check if last few characters match
			const lastCharsMatch = spoken.slice(-2) === expected.slice(-2);
			if (lastCharsMatch && this.fuzzyMatch(spoken, expected)) return true;
		}
		
		// Fuzzy match for pronunciation variations
		return this.fuzzyMatch(spoken, expected);
	}

	revealWord(wordIndex) {
		const wordSpan = document.querySelector(`[data-index="${wordIndex}"]`);
		if (wordSpan) {
			this.revealWordByElement(wordSpan);
		}
	}

	revealWordByElement(wordElement) {
		if (wordElement) {
			// Make word visible with golden color
			wordElement.style.visibility = 'visible';
			wordElement.style.opacity = '1';
			wordElement.style.color = '#b8860b';
			wordElement.classList.add('revealed');
			
			// Add a nice animation
			wordElement.style.transform = 'scale(1.2)';
			wordElement.style.textShadow = '0 0 10px rgba(184, 134, 11, 0.5)';
			
			setTimeout(() => {
				wordElement.style.transform = 'scale(1)';
				wordElement.style.textShadow = 'none';
				wordElement.style.color = '#ffffff'; // Change to white after animation
			}, 500);
		}
	}

	completeAyah() {
		this.showStatus('أحسنت! تم إكمال الآية بنجاح', 'success');
		
		// Make sure all words are visible and highlight them in golden color
		const words = document.querySelectorAll('.word');
		words.forEach(word => {
			word.style.visibility = 'visible';
			word.style.opacity = '1';
			word.style.backgroundColor = 'rgba(184, 134, 11, 0.3)';
			word.style.color = '#b8860b';
			word.classList.add('revealed');
		});

		setTimeout(() => {
			this.currentAyahIndex++;
			this.loadCurrentAyah();
			
			if (this.currentAyahIndex < this.ayahs.length) {
				this.showStatus('الآية التالية جاهزة للتلاوة', 'info');
			}
		}, 3000); // Give more time to see the complete ayah
	}

	skipAyah() {
		this.currentAyahIndex++;
		this.loadCurrentAyah();
		this.showStatus('تم تخطي الآية', 'warning');
	}

	smartComplete() {
		if (this.isMultiVerseMode) {
			this.smartCompleteMultiVerse();
		} else {
			this.smartCompleteSingleVerse();
		}
	}

	smartCompleteSingleVerse() {
		// Complete the current ayah by revealing all remaining words
		const currentAyah = this.ayahs[this.currentAyahIndex];
		const expectedWords = currentAyah.text.split(' ');
		
		// Reveal all remaining words
		for (let i = this.currentWordIndex; i < expectedWords.length; i++) {
			this.revealWord(i);
		}
		
		this.completeBtn.style.display = 'none';
		this.showStatus('تم الإكمال الذكي للآية! 🎉', 'success');
		
		// Move to next ayah after a short delay
		setTimeout(() => {
			this.currentAyahIndex++;
			this.loadCurrentAyah();
			
			if (this.currentAyahIndex < this.ayahs.length) {
				this.showStatus('الآية التالية جاهزة للتلاوة', 'info');
			}
		}, 2000);
	}

	smartCompleteMultiVerse() {
		// Complete all remaining words in multi-verse mode
		const allWordElements = document.querySelectorAll('.word');
		
		// Reveal all remaining words
		for (let i = this.currentWordIndex; i < allWordElements.length; i++) {
			this.revealWordByElement(allWordElements[i]);
		}
		
		this.completeBtn.style.display = 'none';
		this.showStatus('تم الإكمال الذكي للآيات! 🎉', 'success');
		
		// Count completed verses and move forward
		const lastWordAyah = parseInt(allWordElements[allWordElements.length - 1]?.getAttribute('data-ayah'));
		const versesCompleted = lastWordAyah - this.currentAyahIndex + 1;
		
		// Move to next set of verses after a short delay
		setTimeout(() => {
			this.currentAyahIndex += versesCompleted;
			this.loadCurrentAyah();
			
			if (this.currentAyahIndex < this.ayahs.length) {
				this.showStatus('الآيات التالية جاهزة للتلاوة', 'info');
			}
		}, 2000);
	}

	completeSurah() {
		this.stopListening();
		this.ayahText.innerHTML = `
			<div class="text-center">
				<i class="fas fa-trophy fa-3x mb-3" style="color: #b8860b;"></i>
				<h3 style="color: #b8860b; font-family: 'Quranic';">مبارك! تم إكمال السورة</h3>
				<p style="color: rgba(255, 255, 255, 0.8); font-family: 'Quranic';">أحسنت في تلاوة السورة</p>
			</div>
		`;
		this.showStatus('تم إكمال السورة بنجاح!', 'success');
	}

	updateProgress() {
		const progress = ((this.currentAyahIndex) / this.ayahs.length) * 100;
		this.progressBar.style.width = progress + '%';
		this.progressBar.setAttribute('aria-valuenow', progress);
	}

	normalizeArabic(text) {
		// More aggressive normalization for better matching
		return text
			.replace(/[\u064B-\u065F\u0670\u06D6-\u06ED]/g, '') // Remove all diacritics
			.replace(/[أإآا]/g, 'ا') // Normalize all alif variations
			.replace(/[ةه]/g, 'ه') // Normalize taa marboota and haa
			.replace(/[يى]/g, 'ى') // Normalize all yaa variations
			.replace(/[وؤ]/g, 'و') // Normalize waw variations
			.replace(/[ئء]/g, 'ا') // Normalize hamza variations
			.replace(/[^\u0600-\u06FF\s]/g, '') // Keep only Arabic letters and spaces
			.replace(/\s+/g, ' ') // Normalize spaces
			.trim()
			.toLowerCase(); // Convert to lowercase for better matching
	}

	fuzzyMatch(spoken, expected) {
		// Simple fuzzy matching for Arabic words
		const spokenClean = spoken.replace(/\s+/g, '');
		const expectedClean = expected.replace(/\s+/g, '');
		
		// Check if expected word is contained in spoken text or vice versa
		if (spokenClean.includes(expectedClean) || expectedClean.includes(spokenClean)) return true;
		
		// Check similarity ratio with more lenient threshold for Arabic
		const similarity = this.calculateSimilarity(spokenClean, expectedClean);
		return similarity > 0.30; // Much more lenient - 30% similarity threshold
	}

	calculateSimilarity(a, b) {
		const matrix = [];
		const lenA = a.length;
		const lenB = b.length;

		// Create matrix
		for (let i = 0; i <= lenA; i++) {
			matrix[i] = [i];
		}
		for (let j = 0; j <= lenB; j++) {
			matrix[0][j] = j;
		}

		// Fill matrix
		for (let i = 1; i <= lenA; i++) {
			for (let j = 1; j <= lenB; j++) {
				if (a[i - 1] === b[j - 1]) {
					matrix[i][j] = matrix[i - 1][j - 1];
				} else {
					matrix[i][j] = Math.min(
						matrix[i - 1][j - 1] + 1,
						matrix[i][j - 1] + 1,
						matrix[i - 1][j] + 1
					);
				}
			}
		}

		const maxLen = Math.max(lenA, lenB);
		return maxLen === 0 ? 1 : 1 - matrix[lenA][lenB] / maxLen;
	}

	showStatus(message, type = 'info') {
		this.statusMessage.className = `status-alert alert-${type}`;
		this.statusMessage.textContent = message;
		this.statusMessage.style.display = 'block';
		
		setTimeout(() => {
			this.statusMessage.style.display = 'none';
		}, 5000);
	}
}

// Initialize the reciter when page loads
document.addEventListener('DOMContentLoaded', () => {
	new QuranReciter();
});
</script>

<style>
.btn-custom {
	padding: 15px 25px;
	font-size: 1.1rem;
	font-family: 'Quranic', serif;
	border: 2px solid #b8860b;
	border-radius: 25px;
	transition: all 0.3s ease;
	cursor: pointer;
	min-width: 150px;
	font-weight: 500;
}

.btn-success {
	background: linear-gradient(135deg, #2d2d2d 0%, #1a1a1a 100%);
	color: #b8860b;
}

.btn-success:hover:not(:disabled) {
	background: linear-gradient(135deg, #b8860b 0%, #d4af37 100%);
	color: #000000;
	transform: translateY(-2px);
	box-shadow: 0 5px 15px rgba(184, 134, 11, 0.4);
}

.btn-danger {
	background: linear-gradient(135deg, #b8860b 0%, #d4af37 100%);
	color: #000000;
	border-color: #b8860b;
}

.btn-danger:hover:not(:disabled) {
	background: linear-gradient(135deg, #d4af37 0%, #b8860b 100%);
	transform: translateY(-2px);
	box-shadow: 0 5px 15px rgba(184, 134, 11, 0.4);
}

.btn-secondary {
	background: linear-gradient(135deg, #2d2d2d 0%, #1a1a1a 100%);
	color: rgba(255, 255, 255, 0.8);
	border-color: rgba(184, 134, 11, 0.5);
}

.btn-secondary:hover {
	background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
	color: #b8860b;
	border-color: #b8860b;
	transform: translateY(-2px);
}

.btn-back {
	background: linear-gradient(135deg, #2d2d2d 0%, #1a1a1a 100%);
	color: #b8860b;
	text-decoration: none;
	padding: 12px 20px;
	border-radius: 20px;
	border: 2px solid #b8860b;
	transition: all 0.3s ease;
	display: inline-block;
	font-family: 'Quranic', serif;
}

.btn-smart {
	background: linear-gradient(135deg, #17a2b8 0%, #138496 100%);
	color: #ffffff;
	border-color: #17a2b8;
}

.btn-smart:hover {
	background: linear-gradient(135deg, #138496 0%, #0c5460 100%);
	color: #ffffff;
	transform: translateY(-2px);
	box-shadow: 0 5px 15px rgba(23, 162, 184, 0.4);
}

.btn-multi {
	background: linear-gradient(135deg, #6f42c1 0%, #5a2a9b 100%);
	color: #ffffff;
	border-color: #6f42c1;
}

.btn-multi:hover {
	background: linear-gradient(135deg, #5a2a9b 0%, #4a1e7a 100%);
	color: #ffffff;
	transform: translateY(-2px);
	box-shadow: 0 5px 15px rgba(111, 66, 193, 0.4);
}

.btn-multi.active {
	background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
	border-color: #28a745;
	box-shadow: 0 0 10px rgba(40, 167, 69, 0.5);
}

.btn-back:hover {
	background: linear-gradient(135deg, #b8860b 0%, #d4af37 100%);
	color: #000000;
	text-decoration: none;
	transform: translateY(-2px);
}

.btn-custom:disabled {
	opacity: 0.5;
	cursor: not-allowed;
	transform: none !important;
	box-shadow: none !important;
}

.word {
	transition: all 0.5s ease;
	padding: 2px 4px;
	border-radius: 4px;
	opacity: 0;
	visibility: hidden;
	transform: scale(0.8);
}

.word.revealed {
	opacity: 1 !important;
	visibility: visible !important;
	transform: scale(1);
	color: #ffffff !important;
}

.word:hover {
	background-color: rgba(184, 134, 11, 0.1);
}

.pulse {
	animation: pulse 1.5s infinite;
}

@keyframes pulse {
	0% { transform: scale(1); opacity: 1; }
	50% { transform: scale(1.1); opacity: 0.8; }
	100% { transform: scale(1); opacity: 1; }
}

.microphone-animation {
	position: relative;
}

.microphone-animation::before {
	content: '';
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
	width: 80px;
	height: 80px;
	border-radius: 50%;
	border: 2px solid rgba(184, 134, 11, 0.3);
	animation: ripple 1.5s infinite;
}

@keyframes ripple {
	0% {
		width: 80px;
		height: 80px;
		opacity: 0.8;
	}
	100% {
		width: 120px;
		height: 120px;
		opacity: 0;
	}
}

.controls-container {
	background: linear-gradient(135deg, #2d2d2d 0%, #1a1a1a 100%);
	padding: 2rem;
	border-radius: 20px;
	border: 2px solid #b8860b;
	box-shadow: 0px 7px 15px 1px rgba(184, 134, 11, 0.2);
}

.status-alert {
	padding: 15px 25px;
	border-radius: 15px;
	font-family: 'Quranic', serif;
	font-size: 1.1rem;
	border: 2px solid;
	margin: 10px 0;
	max-width: 600px;
}

.status-alert.alert-info {
	background: linear-gradient(135deg, #2d2d2d 0%, #1a1a1a 100%);
	color: #b8860b;
	border-color: #b8860b;
}

.status-alert.alert-success {
	background: linear-gradient(135deg, #1a4a1a 0%, #2d4a2d 100%);
	color: #90EE90;
	border-color: #90EE90;
}

.status-alert.alert-warning {
	background: linear-gradient(135deg, #4a3d1a 0%, #4a4a2d 100%);
	color: #FFD700;
	border-color: #FFD700;
}

.status-alert.alert-danger {
	background: linear-gradient(135deg, #4a1a1a 0%, #4a2d2d 100%);
	color: #FF6B6B;
	border-color: #FF6B6B;
}

.status-alert.alert-secondary {
	background: linear-gradient(135deg, #2d2d2d 0%, #1a1a1a 100%);
	color: rgba(255, 255, 255, 0.8);
	border-color: rgba(184, 134, 11, 0.5);
}

/* Responsive adjustments */
@media (max-width: 768px) {
	.btn-custom {
		padding: 12px 20px;
		font-size: 1rem;
		min-width: 120px;
		margin-bottom: 10px;
	}
	
	.controls-container {
		padding: 1.5rem;
	}
	
	#ayah-text {
		font-size: 2rem !important;
	}
}

@media (max-width: 576px) {
	.btn-custom {
		padding: 10px 15px;
		font-size: 0.9rem;
		min-width: 100px;
	}
	
	#ayah-text {
		font-size: 1.8rem !important;
	}
}
</style>
