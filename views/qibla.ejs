<nav class="navbar navbar-expand-lg navbar-light">
	<div class="container-xxl">
		<a class="navbar-brand d-flex" href="/">
			<i class="fas fa-mosque" style="margin-left: 10px; font-size: 1.8rem;"></i>
			 القرآن الكريم
		</a>
		<button
			class="navbar-toggler"
			type="button"
			data-bs-toggle="collapse"
			data-bs-target="#navbarNav"
			aria-controls="navbarNav"
			aria-expanded="false"
			aria-label="Toggle navigation"
		>
			<span class="navbar-toggler-icon"></span>
		</button>
		<div class="collapse navbar-collapse" id="navbarNav">
			<ul class="navbar-nav">
				<li class="nav-item me-3">
					<a class="nav-link" href="/">الرئيسية</a>
				</li>
				<li class="nav-item me-3">
					<a class="nav-link" href="/surahs">السور</a>
				</li>
				<li class="nav-item me-3">
					<a class="nav-link" href="/search">البحث</a>
				</li>
				<li class="nav-item me-3">
					<a class="nav-link active" aria-current="page" href="/qibla">اتجاه القبلة</a>
				</li>
				<li class="nav-item me-3">
					<a class="nav-link" href="/prayer-times">أوقات الصلاة</a>
				</li>
			</ul>
		</div>
	</div>
</nav>

<div class="container my-5">
	<div class="text-center mb-4">
		<h1 class="qibla-title">اتجاه القبلة</h1>
		<p class="qibla-subtitle">استخدم البوصلة لتحديد اتجاه القبلة من موقعك</p>
	</div>

	<div class="row justify-content-center">
		<div class="col-md-8">
			<div class="qibla-container">
				<div id="location-info" class="mb-4 text-center">
					<h5 class="location-title">الموقع الحالي</h5>
					<p id="coordinates" class="location-text">جاري تحديد الموقع...</p>
				</div>				<div class="compass-container position-relative d-flex justify-content-center align-items-center mb-4">
					<div class="compass-outer">
						<div class="compass-inner" id="compass">
							<div class="compass-face">
								<!-- Compass tick marks -->
								<div class="compass-ticks">
									<!-- Major ticks every 30 degrees -->
									<div class="tick major" style="transform: rotate(0deg)"><span>N</span></div>
									<div class="tick major" style="transform: rotate(30deg)"><span>30</span></div>
									<div class="tick major" style="transform: rotate(60deg)"><span>60</span></div>
									<div class="tick major" style="transform: rotate(90deg)"><span>E</span></div>
									<div class="tick major" style="transform: rotate(120deg)"><span>120</span></div>
									<div class="tick major" style="transform: rotate(150deg)"><span>150</span></div>
									<div class="tick major" style="transform: rotate(180deg)"><span>S</span></div>
									<div class="tick major" style="transform: rotate(210deg)"><span>210</span></div>
									<div class="tick major" style="transform: rotate(240deg)"><span>240</span></div>
									<div class="tick major" style="transform: rotate(270deg)"><span>W</span></div>
									<div class="tick major" style="transform: rotate(300deg)"><span>300</span></div>
									<div class="tick major" style="transform: rotate(330deg)"><span>330</span></div>
								</div>
								
								<!-- Compass cardinal directions -->
								<div class="cardinal-directions">
									<div class="cardinal north">ش</div>
									<div class="cardinal east">ق</div>
									<div class="cardinal south">ج</div>
									<div class="cardinal west">غ</div>
								</div>
								
								<!-- Qibla sector (shaded area) -->
								<div class="qibla-sector" id="qibla-sector">
									<div class="sector-fill"></div>
								</div>
								
								<!-- Qibla arrow (Google-style) -->
								<div class="qibla-arrow" id="qibla-arrow">
									<div class="arrow-body"></div>
									<div class="arrow-head"></div>
								</div>
								
								<!-- Device orientation indicator -->
								<div class="device-indicator" id="device-indicator">
									<div class="indicator-dot"></div>
								</div>
								
								<!-- Center circle -->
								<div class="compass-center"></div>
							</div>
						</div>
					</div>
				</div>

					<div class="compass-info">
						<div class="row text-center">
							<div class="col-md-4 mb-3">
								<div class="qibla-info-box p-3">
									<h6 class="info-label mb-2">اتجاه القبلة</h6>
									<span id="qibla-direction" class="info-value">--°</span>
								</div>
							</div>
							<div class="col-md-4 mb-3">
								<div class="qibla-info-box p-3">
									<h6 class="info-label mb-2">المسافة إلى مكة</h6>
									<span id="distance-to-mecca" class="info-value">-- كم</span>
								</div>
							</div>
							<div class="col-md-4 mb-3">
								<div id="direction-status" class="qibla-info-box p-3">
									<h6 class="info-label mb-2">حالة الاتجاه</h6>
									<span id="accuracy-indicator" class="info-value">--</span>
								</div>
							</div>
						</div>
					</div>

					<div class="mt-4 text-center">
						<button id="recalibrate-btn" class="qibla-btn me-2">
							<i class="fas fa-sync-alt"></i> إعادة المعايرة
						</button>
						<button id="get-location-btn" class="qibla-btn-outline">
							<i class="fas fa-map-marker-alt"></i> تحديث الموقع
						</button>
					</div>

					<div class="qibla-alert mt-3">
						<small>
							<i class="fas fa-info-circle"></i>
							تأكد من تمكين الموقع والبوصلة في متصفحك للحصول على أفضل النتائج
						</small>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<script>
class AdvancedQiblaCompass {
	constructor() {
		this.userLocation = null;
		this.qiblaDirection = null;
		this.deviceHeading = 0;
		this.magneticDeclination = 0;
		this.isCalibrating = false;
		this.smoothingFactor = 0.15;
		this.headingHistory = [];
		this.maxHistorySize = 10;
		
		// Kaaba coordinates (most precise)
		this.meccaCoords = { 
			lat: 21.422487, 
			lng: 39.826206 
		};
		
		// Sensor fusion parameters
		this.alpha = 0;
		this.beta = 0;
		this.gamma = 0;
		this.accelerometer = { x: 0, y: 0, z: 0 };
		this.magnetometer = { x: 0, y: 0, z: 0 };
		
		this.init();
	}

	init() {
		this.getUserLocation();
		this.setupEventListeners();
		this.startCompass();
	}

	setupEventListeners() {
		document.getElementById('get-location-btn').addEventListener('click', () => {
			this.getUserLocation();
		});
		
		document.getElementById('recalibrate-btn').addEventListener('click', () => {
			this.calibrateCompass();
		});
	}

	getUserLocation() {
		if (!navigator.geolocation) {
			this.showError('الجهاز لا يدعم تحديد الموقع');
			return;
		}

		document.getElementById('coordinates').textContent = 'جاري تحديد الموقع...';

		navigator.geolocation.getCurrentPosition(
			(position) => {
				this.userLocation = {
					lat: position.coords.latitude,
					lng: position.coords.longitude
				};
				this.updateLocationDisplay();
		this.calculateQiblaDirection();
		this.calculateDistanceToMecca();
			},
			(error) => {
				this.showError('فشل في تحديد الموقع: ' + error.message);
			},
			{
				enableHighAccuracy: true,
				timeout: 10000,
				maximumAge: 300000
			}
		);
	}

	updateLocationDisplay() {
		const coords = document.getElementById('coordinates');
		const accuracy = this.userLocation.accuracy || 0;
		let accuracyText = '';
		
		if (accuracy <= 10) {
			accuracyText = '<span class="text-success">دقة عالية</span>';
		} else if (accuracy <= 50) {
			accuracyText = '<span class="text-warning">دقة متوسطة</span>';
		} else {
			accuracyText = '<span class="text-danger">دقة منخفضة</span>';
		}

		coords.innerHTML = `
			<i class="fas fa-map-marker-alt text-success"></i>
			${this.userLocation.lat.toFixed(6)}°, ${this.userLocation.lng.toFixed(6)}°
			<br><small>${accuracyText} (±${Math.round(accuracy)}م)</small>
		`;
	}

	calculateQiblaDirection() {
		if (!this.userLocation) return;

		const userLat = this.toRadians(this.userLocation.lat);
		const userLng = this.toRadians(this.userLocation.lng);
		const meccaLat = this.toRadians(this.meccaCoords.lat);
		const meccaLng = this.toRadians(this.meccaCoords.lng);

		const dLng = meccaLng - userLng;

		const y = Math.sin(dLng) * Math.cos(meccaLat);
		const x = Math.cos(userLat) * Math.sin(meccaLat) - 
				  Math.sin(userLat) * Math.cos(meccaLat) * Math.cos(dLng);

		let bearing = Math.atan2(y, x);
		bearing = this.toDegrees(bearing);
		bearing = (bearing + 360) % 360;

		this.qiblaDirection = bearing;
		document.getElementById('qibla-direction').textContent = Math.round(bearing) + '°';
		
		this.updateQiblaNeedle();
	}

	calculateDistanceToMecca() {
		if (!this.userLocation) return;

		const R = 6371; // Earth's radius in km
		const dLat = this.toRadians(this.meccaCoords.lat - this.userLocation.lat);
		const dLng = this.toRadians(this.meccaCoords.lng - this.userLocation.lng);
		
		const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
				  Math.cos(this.toRadians(this.userLocation.lat)) * Math.cos(this.toRadians(this.meccaCoords.lat)) *
				  Math.sin(dLng/2) * Math.sin(dLng/2);
		
		const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
		const distance = R * c;

		document.getElementById('distance-to-mecca').textContent = this.formatDistance(distance);
	}

	formatDistance(km) {
		if (km < 1) {
			return `${Math.round(km * 1000)} متر`;
		} else if (km < 100) {
			return `${km.toFixed(1)} كم`;
		} else {
			return `${Math.round(km).toLocaleString()} كم`;
		}
	}

	startCompass() {
		// Request permission for iOS 13+
		if (typeof DeviceOrientationEvent.requestPermission === 'function') {
			DeviceOrientationEvent.requestPermission()
				.then(response => {
					if (response == 'granted') {
						this.enableCompass();
					} else {
						this.showError('يرجى السماح بالوصول إلى البوصلة');
					}
				})
				.catch(console.error);
		} else {
			this.enableCompass();
		}
	}

	enableCompass() {
		if ('DeviceOrientationEvent' in window) {
			// Use deviceorientationabsolute if available (more accurate)
			if ('ondeviceorientationabsolute' in window) {
				window.addEventListener('deviceorientationabsolute', (event) => {
					this.handleOrientation(event);
				}, { passive: true });
			} else {
				window.addEventListener('deviceorientation', (event) => {
					this.handleOrientation(event);
				}, { passive: true });
			}
		} else {
			this.showError('الجهاز لا يدعم البوصلة');
		}
	}

	handleOrientation(event) {
		let heading = event.alpha;
		
		if (heading !== null) {
			// For iOS devices - webkitCompassHeading is more accurate
			if (event.webkitCompassHeading) {
				heading = event.webkitCompassHeading;
			} else if (heading < 0) {
				heading = 360 + heading;
			}
			
			// Smooth the heading to reduce jitter
			if (this.deviceHeading !== 0) {
				const diff = heading - this.deviceHeading;
				if (Math.abs(diff) > 180) {
					// Handle wrap-around
					if (diff > 0) {
						heading -= 360;
					} else {
						heading += 360;
					}
				}
				// Apply smoothing
				this.deviceHeading = this.deviceHeading + (heading - this.deviceHeading) * 0.3;
			} else {
				this.deviceHeading = heading;
			}
			
			this.updateNeedles();
		}
	}

	updateDeviceNeedle() {
		const indicator = document.getElementById('device-indicator');
		if (indicator) {
			indicator.style.transform = `translate(-50%, -50%) rotate(${-this.deviceHeading}deg)`;
		}
	}

	updateQiblaNeedle() {
		if (this.qiblaDirection === null) return;
		
		const arrow = document.getElementById('qibla-arrow');
		const sector = document.getElementById('qibla-sector');
		
		if (arrow) {
			const rotation = this.qiblaDirection - this.deviceHeading;
			arrow.style.transform = `translate(-50%, -50%) rotate(${rotation}deg)`;
		}
		
		if (sector) {
			const rotation = this.qiblaDirection - this.deviceHeading;
			sector.style.transform = `translate(-50%, -50%) rotate(${rotation}deg)`;
		}
	}

	updateNeedles() {
		this.updateDeviceNeedle();
		this.updateQiblaNeedle();
		this.updateAccuracyIndicator();
	}

	updateAccuracyIndicator() {
		if (this.qiblaDirection === null) return;
		
		const indicator = document.getElementById('accuracy-indicator');
		const statusBox = document.getElementById('direction-status');
		
		if (!indicator || !statusBox) return;
		
		let diff = Math.abs(this.deviceHeading - this.qiblaDirection);
		if (diff > 180) {
			diff = 360 - diff;
		}
		
		let status, className, boxClassName;
		
		if (diff <= 3) {
			status = 'مثالي ✓✓';
			className = 'info-value perfect';
			boxClassName = 'qibla-info-box p-3 perfect-box';
		} else if (diff <= 8) {
			status = 'دقيق جداً ✓';
			className = 'info-value accurate';
			boxClassName = 'qibla-info-box p-3 accurate-box';
		} else if (diff <= 15) {
			status = 'دقيق';
			className = 'info-value good';
			boxClassName = 'qibla-info-box p-3 good-box';
		} else if (diff <= 30) {
			status = 'قريب';
			className = 'info-value close';
			boxClassName = 'qibla-info-box p-3 close-box';
		} else {
			status = 'بعيد';
			className = 'info-value far';
			boxClassName = 'qibla-info-box p-3 far-box';
		}
		
		indicator.textContent = status;
		indicator.className = className;
		statusBox.className = boxClassName;
	}

	calibrateCompass() {
		// Reset and recalibrate
		this.deviceHeading = 0;
		if (this.userLocation) {
			this.calculateQiblaDirection();
		}
	}

	toRadians(degrees) {
		return degrees * (Math.PI / 180);
	}

	toDegrees(radians) {
		return radians * (180 / Math.PI);
	}

	showError(message) {
		document.getElementById('coordinates').innerHTML = 
			`<i class="fas fa-exclamation-triangle"></i> ${message}`;
	}
}

// Initialize the Qibla compass when page loads
document.addEventListener('DOMContentLoaded', () => {
	new AdvancedQiblaCompass();
});
</script>

<style>
/* Main container styling */
.qibla-title {
	color: #b8860b;
	font-family: "Quranic";
	font-size: 2.5rem;
	margin-bottom: 1rem;
}

.qibla-subtitle {
	color: #ffffff;
	font-size: 1.2rem;
	opacity: 0.9;
}

.qibla-container {
	background: linear-gradient(135deg, #2d2d2d 0%, #1a1a1a 100%);
	border: 2px solid #b8860b;
	border-radius: 20px;
	padding: 2rem;
	box-shadow: 0px 7px 15px 1px rgba(184, 134, 11, 0.3);
}

.location-title {
	color: #b8860b;
	font-size: 1.3rem;
	margin-bottom: 0.5rem;
}

.location-text {
	color: #ffffff;
	font-size: 1rem;
	opacity: 0.9;
}

/* Compass styling */
.compass-container {
	margin: 2rem 0;
}

.compass-wrapper {
	width: 300px;
	height: 300px;
	position: relative;
	margin: 0 auto;
}

.compass-outer {
	width: 100%;
	height: 100%;
	border-radius: 50%;
	background: linear-gradient(45deg, #333333, #2d2d2d);
	box-shadow: 
		inset 0 0 20px rgba(0,0,0,0.3),
		0 0 30px rgba(184, 134, 11, 0.2);
	display: flex;
	align-items: center;
	justify-content: center;
	position: relative;
}

.compass-inner {
	width: 280px;
	height: 280px;
	border-radius: 50%;
	background: radial-gradient(circle, #1a1a1a, #2d2d2d);
	border: 3px solid #b8860b;
	position: relative;
	overflow: hidden;
}

/* Tick marks around the compass */
.tick-marks {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	border-radius: 50%;
}

.tick-marks::before,
.tick-marks::after {
	content: '';
	position: absolute;
	width: 100%;
	height: 100%;
	border-radius: 50%;
	background: conic-gradient(
		from 0deg,
		transparent 0deg,
		transparent 7.5deg,
		#b8860b 7.5deg,
		#b8860b 8.5deg,
		transparent 8.5deg,
		transparent 22.5deg,
		#b8860b 22.5deg,
		#b8860b 23.5deg,
		transparent 23.5deg,
		transparent 37.5deg,
		#b8860b 37.5deg,
		#b8860b 38.5deg,
		transparent 38.5deg,
		transparent 52.5deg,
		#b8860b 52.5deg,
		#b8860b 53.5deg,
		transparent 53.5deg,
		transparent 67.5deg,
		#b8860b 67.5deg,
		#b8860b 68.5deg,
		transparent 68.5deg,
		transparent 82.5deg,
		#b8860b 82.5deg,
		#b8860b 83.5deg,
		transparent 83.5deg,
		transparent 97.5deg,
		#b8860b 97.5deg,
		#b8860b 98.5deg,
		transparent 98.5deg,
		transparent 112.5deg,
		#b8860b 112.5deg,
		#b8860b 113.5deg,
		transparent 113.5deg,
		transparent 127.5deg,
		#b8860b 127.5deg,
		#b8860b 128.5deg,
		transparent 128.5deg,
		transparent 142.5deg,
		#b8860b 142.5deg,
		#b8860b 143.5deg,
		transparent 143.5deg,
		transparent 157.5deg,
		#b8860b 157.5deg,
		#b8860b 158.5deg,
		transparent 158.5deg,
		transparent 172.5deg,
		#b8860b 172.5deg,
		#b8860b 173.5deg,
		transparent 173.5deg,
		transparent 187.5deg,
		#b8860b 187.5deg,
		#b8860b 188.5deg,
		transparent 188.5deg,
		transparent 202.5deg,
		#b8860b 202.5deg,
		#b8860b 203.5deg,
		transparent 203.5deg,
		transparent 217.5deg,
		#b8860b 217.5deg,
		#b8860b 218.5deg,
		transparent 218.5deg,
		transparent 232.5deg,
		#b8860b 232.5deg,
		#b8860b 233.5deg,
		transparent 233.5deg,
		transparent 247.5deg,
		#b8860b 247.5deg,
		#b8860b 248.5deg,
		transparent 248.5deg,
		transparent 262.5deg,
		#b8860b 262.5deg,
		#b8860b 263.5deg,
		transparent 263.5deg,
		transparent 277.5deg,
		#b8860b 277.5deg,
		#b8860b 278.5deg,
		transparent 278.5deg,
		transparent 292.5deg,
		#b8860b 292.5deg,
		#b8860b 293.5deg,
		transparent 293.5deg,
		transparent 307.5deg,
		#b8860b 307.5deg,
		#b8860b 308.5deg,
		transparent 308.5deg,
		transparent 322.5deg,
		#b8860b 322.5deg,
		#b8860b 323.5deg,
		transparent 323.5deg,
		transparent 337.5deg,
		#b8860b 337.5deg,
		#b8860b 338.5deg,
		transparent 338.5deg,
		transparent 352.5deg,
		#b8860b 352.5deg,
		#b8860b 353.5deg,
		transparent 353.5deg,
		transparent 360deg
	);
	mask: radial-gradient(circle, transparent 125px, white 125px, white 135px, transparent 135px);
	-webkit-mask: radial-gradient(circle, transparent 125px, white 125px, white 135px, transparent 135px);
}

/* Cardinal directions */
.direction {
	position: absolute;
	font-weight: bold;
	font-size: 1.5rem;
	color: #b8860b;
	z-index: 2;
}

.direction.north {
	top: 10px;
	left: 50%;
	transform: translateX(-50%);
	color: #dc3545;
}

.direction.east {
	right: 15px;
	top: 50%;
	transform: translateY(-50%);
}

.direction.south {
	bottom: 10px;
	left: 50%;
	transform: translateX(-50%);
}

.direction.west {
	left: 15px;
	top: 50%;
	transform: translateY(-50%);
}

/* Qibla sector (shaded area) */
.qibla-sector {
	position: absolute;
	top: 50%;
	left: 50%;
	width: 100%;
	height: 100%;
	transform: translate(-50%, -50%);
	border-radius: 50%;
	overflow: hidden;
	z-index: 1;
}

.qibla-sector::before {
	content: '';
	position: absolute;
	top: 0;
	left: 50%;
	width: 0;
	height: 0;
	border-left: 140px solid transparent;
	border-right: 140px solid transparent;
	border-top: 140px solid rgba(184, 134, 11, 0.15);
	transform: translateX(-50%);
	transform-origin: bottom center;
	transition: transform 0.3s ease;
}

/* Google-style arrow */
.qibla-arrow {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
	z-index: 5;
	transition: transform 0.3s ease;
}

.arrow-body {
	width: 8px;
	height: 90px;
	position: relative;
	transform: translateY(-45px);
}

.arrow-head {
	width: 0;
	height: 0;
	border-left: 8px solid transparent;
	border-right: 8px solid transparent;
	border-bottom: 20px solid #b8860b;
	margin: 0 auto;
	position: relative;
	z-index: 3;
	filter: drop-shadow(0 0 5px rgba(184, 134, 11, 0.8));
}

.arrow-head::after {
	content: '';
	position: absolute;
	top: 20px;
	left: 50%;
	transform: translateX(-50%);
	width: 0;
	height: 0;
	border-left: 6px solid transparent;
	border-right: 6px solid transparent;
	border-top: 15px solid #d4af37;
}

.arrow-shaft {
	width: 4px;
	height: 70px;
	background: linear-gradient(to bottom, #b8860b, #d4af37);
	margin: 0 auto;
	border-radius: 2px;
	box-shadow: 0 0 5px rgba(184, 134, 11, 0.5);
}

/* Device orientation indicator */
.device-indicator {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
	z-index: 3;
	transition: transform 0.1s ease;
}

.device-dot {
	width: 12px;
	height: 12px;
	background: #dc3545;
	border: 2px solid #ffffff;
	border-radius: 50%;
	box-shadow: 0 0 8px rgba(220, 53, 69, 0.6);
	position: relative;
}

.device-dot::before {
	content: '';
	position: absolute;
	top: -40px;
	left: 50%;
	transform: translateX(-50%);
	width: 0;
	height: 0;
	border-left: 3px solid transparent;
	border-right: 3px solid transparent;
	border-bottom: 8px solid #dc3545;
}

.compass-center {
	position: absolute;
	top: 50%;
	left: 50%;
	width: 16px;
	height: 16px;
	background: #b8860b;
	border: 3px solid #ffffff;
	border-radius: 50%;
	transform: translate(-50%, -50%);
	z-index: 4;
	box-shadow: 0 0 10px rgba(184, 134, 11, 0.5);
}

/* Accuracy status boxes */
.perfect-box {
	border-color: #28a745 !important;
	box-shadow: 0 4px 12px rgba(40, 167, 69, 0.3) !important;
}

.accurate-box {
	border-color: #17a2b8 !important;
	box-shadow: 0 4px 12px rgba(23, 162, 184, 0.3) !important;
}

.good-box {
	border-color: #ffc107 !important;
	box-shadow: 0 4px 12px rgba(255, 193, 7, 0.3) !important;
}

.close-box {
	border-color: #fd7e14 !important;
	box-shadow: 0 4px 12px rgba(253, 126, 20, 0.3) !important;
}

.far-box {
	border-color: #dc3545 !important;
	box-shadow: 0 4px 12px rgba(220, 53, 69, 0.3) !important;
}

.info-value.perfect {
	color: #28a745 !important;
}

.info-value.accurate {
	color: #17a2b8 !important;
}

.info-value.good {
	color: #ffc107 !important;
}

.info-value.close {
	color: #fd7e14 !important;
}

.info-value.far {
	color: #dc3545 !important;
}

/* Info boxes */
.qibla-info-box {
	background: linear-gradient(135deg, #333333 0%, #2d2d2d 100%);
	border: 1px solid #555555;
	border-radius: 15px;
	transition: all 0.3s ease;
}

.qibla-info-box:hover {
	transform: translateY(-2px);
	border-color: #b8860b;
	box-shadow: 0 4px 12px rgba(184, 134, 11, 0.3);
}

.info-label {
	color: #b8860b;
	font-size: 1rem;
	font-weight: 600;
}

.info-value {
	color: #ffffff;
	font-size: 1.5rem;
	font-weight: bold;
}

/* Buttons */
.qibla-btn {
	background: linear-gradient(135deg, #b8860b 0%, #d4af37 100%);
	color: #000000;
	border: none;
	padding: 0.8rem 1.5rem;
	border-radius: 25px;
	font-weight: 600;
	transition: all 0.3s ease;
	cursor: pointer;
}

.qibla-btn:hover {
	transform: translateY(-2px);
	box-shadow: 0 5px 15px rgba(184, 134, 11, 0.4);
	background: linear-gradient(135deg, #d4af37 0%, #b8860b 100%);
	color: #000000;
}

.qibla-btn-outline {
	background: transparent;
	color: #b8860b;
	border: 2px solid #b8860b;
	padding: 0.8rem 1.5rem;
	border-radius: 25px;
	font-weight: 600;
	transition: all 0.3s ease;
	cursor: pointer;
}

.qibla-btn-outline:hover {
	background: #b8860b;
	color: #000000;
	transform: translateY(-2px);
	box-shadow: 0 5px 15px rgba(184, 134, 11, 0.4);
}

/* Alert */
.qibla-alert {
	background: linear-gradient(135deg, #333333 0%, #2d2d2d 100%);
	border: 1px solid #b8860b;
	border-radius: 10px;
	padding: 1rem;
	color: #ffffff;
	opacity: 0.9;
}

.qibla-alert i {
	color: #b8860b;
	margin-left: 0.5rem;
}

/* Responsive design */
@media (max-width: 768px) {
	.qibla-container {
		margin: 0 1rem;
		padding: 1.5rem;
	}
	
	.qibla-title {
		font-size: 2rem;
	}
	
	.compass-wrapper {
		width: 250px;
		height: 250px;
	}
	
	.compass-outer {
		width: 250px;
		height: 250px;
	}
	
	.compass-inner {
		width: 230px;
		height: 230px;
	}
	
	.tick-marks::before,
	.tick-marks::after {
		mask: radial-gradient(circle, transparent 105px, white 105px, white 115px, transparent 115px);
		-webkit-mask: radial-gradient(circle, transparent 105px, white 105px, white 115px, transparent 115px);
	}
	
	.qibla-sector::before {
		border-left: 115px solid transparent;
		border-right: 115px solid transparent;
		border-top: 115px solid rgba(184, 134, 11, 0.15);
	}
	
	.arrow-body {
		height: 70px;
	}
	
	.arrow-shaft {
		height: 50px;
	}
}

@media (max-width: 576px) {
	.compass-wrapper {
		width: 220px;
		height: 220px;
	}
	
	.compass-outer {
		width: 220px;
		height: 220px;
	}
	
	.compass-inner {
		width: 200px;
		height: 200px;
	}
	
	.tick-marks::before,
	.tick-marks::after {
		mask: radial-gradient(circle, transparent 90px, white 90px, white 100px, transparent 100px);
		-webkit-mask: radial-gradient(circle, transparent 90px, white 90px, white 100px, transparent 100px);
	}
	
	.qibla-sector::before {
		border-left: 100px solid transparent;
		border-right: 100px solid transparent;
		border-top: 100px solid rgba(184, 134, 11, 0.15);
	}
}
</style>
